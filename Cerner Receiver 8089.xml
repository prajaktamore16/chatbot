<channel version="3.9.1">
  <id>6848238e-a64b-49b5-b06b-a2eddeeed246</id>
  <nextMetaDataId>9</nextMetaDataId>
  <name>Cerner Receiver 8089</name>
  <description></description>
  <revision>296</revision>
  <sourceConnector version="3.9.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.9.1">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.9.1">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="3.9.1">
        <host>0.0.0.0</host>
        <port>8089</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.9.1">
        <responseVariable>Postprocessor</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>false</xmlBody>
      <parseMultipart>true</parseMultipart>
      <includeMetadata>false</includeMetadata>
      <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
      <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
      <responseContentType>${http-content-type}</responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode>${http-status-code}</responseStatusCode>
      <responseHeaders class="linked-hash-map"/>
      <responseHeadersVariable></responseHeadersVariable>
      <useResponseHeadersVariable>false</useResponseHeadersVariable>
      <charset>UTF-8</charset>
      <contextPath>cerner</contextPath>
      <timeout>30000</timeout>
      <staticResources/>
    </properties>
    <transformer version="3.9.1">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
          <name>route to particular destination</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>var contextPath = sourceMap.get(&apos;contextPath&apos;);
var method = sourceMap.get(&apos;method&apos;);
var paramsData = sourceMap.get(&apos;parameters&apos;);
var destinationID;

var channelDB = globalMap.get(&apos;channel_qliq_db&apos;);

var baseMap = Maps.map()
.add(&apos;sourceChannelId&apos;, channelId)
.add(&apos;sourceChannelName&apos;, channelName)

//select access_token from register.ehr_cdetails where ehr_name = &apos;cerner&apos;;
var siteIdQuery = &apos;select access_token from register.ehr_cdetails where ehr_name = ?&apos;;

var siteIdQueryString = JSON.stringify({
query: siteIdQuery,
params: [&apos;cerner&apos;]
});

var siteIdQueryRequest = new RawMessage(siteIdQueryString, [1], baseMap);
var siteIdQueryResponse = router.routeMessageByChannelId(channelDB, siteIdQueryRequest);
logger.info(&quot;response in token manager=&quot;+siteIdQueryResponse.getMessage());
 var data =JSON.parse(siteIdQueryResponse.getMessage());
 var access_token= data[0].access_token;
 channelMap.put(&apos;access_token&apos;,access_token);
 
  

	 if( method == &apos;GET&apos; &amp;&amp; contextPath == &apos;/cerner/appointment-lookup&apos;)
   		{
            		destinationID = 1;
        		destinationSet.removeAllExcept(destinationID);
                return;
          }
       
	 if( method == &apos;GET&apos; &amp;&amp; contextPath == &apos;/cerner/patient-lookup&apos;)
   		{
            		destinationID = 2;
        		destinationSet.removeAllExcept(destinationID);
                return;
          }
            
	 if( method == &apos;POST&apos; &amp;&amp; contextPath == &apos;/cerner/create-appointment&apos;)
   		{
            		destinationID = 3;
        		destinationSet.removeAllExcept(destinationID);
                return;
          }
           if( method == &apos;POST&apos; &amp;&amp; contextPath == &apos;/cerner/create-booked-appointment&apos;)
   		{
            		destinationID = 3;
        		destinationSet.removeAllExcept(destinationID);
                return;
          }
          if( method == &apos;POST&apos; &amp;&amp; contextPath == &apos;/cerner/create-patient&apos;)
   		{
            		destinationID = 4;
        		destinationSet.removeAllExcept(destinationID);
                return;
          }
           if( method == &apos;POST&apos; &amp;&amp; contextPath == &apos;/cerner/access-token&apos;)
   		{
            		destinationID = 5;
        		destinationSet.removeAllExcept(destinationID);
                return;
          }
     if( method == &apos;GET&apos; &amp;&amp; contextPath == &apos;/cerner/get-slot&apos;)
   		{
            		destinationID = 6;
        		destinationSet.removeAllExcept(destinationID);
                return;
          }
        if( method == &apos;PATCH&apos; &amp;&amp; contextPath == &apos;/cerner/cancel-appointment&apos;)
   		{
            		destinationID = 7;
        		destinationSet.removeAllExcept(destinationID);
                return;
          }
         	   
    if (!destinationID) {
    destinationSet.removeAll();
    return;
}

destinationSet.removeAllExcept(destinationID);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.9.1">
      <elements/>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.9.1">
      <metaDataId>1</metaDataId>
      <name>Appointment-Lookup</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>// new code
 var eventData = sourceMap.get(&apos;parameters&apos;);
logger.info(&quot;event data in receiver=&quot;+eventData);
var channelIntegration = globalMap.get(&apos;chaneelCernerIntegration&apos;);

var baseMap = Maps.map()
				.add(&apos;sourceChannelId&apos;, channelId)
				.add(&apos;sourceChannelName&apos;, channelName)
				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
				.add(&apos;eventData&apos;,eventData)
				
				

var AptRequest = new RawMessage(eventData, [1], baseMap);
var AptResult = router.routeMessageByChannelId(channelIntegration, AptRequest);

if (AptResult.getStatus() != &apos;SENT&apos;) {
	channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
	 logger.info(&apos;error=&apos;+AptResult.getError());
	return AptResult.getError();
}
var msg=AptResult.getMessage();
//logger.info(&apos; appointment lookup response&apos;+ JSON.stringify(JSON.parse(AptResult.getMessage())));
logger.info(&apos; appointment lookup response&apos;+ AptResult.getMessage());

     channelMap.put(&apos;http-status-code&apos;, &apos;200&apos;);
	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
	return ResponseFactory.getSentResponse(msg);

//return AptResult.getMessage();

















//var msg = connectorMessage.getEncodedData();
//
////channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
//
////return msg;
//
//// validation transformer
//var version = channelMap.get(&apos;version&apos;); 
////var accessToken =  channelMap.get(&apos;accessToken&apos;); 
////var ehrRecord = channelMap.get(&apos;ehrRecord&apos;);
//var channelDB = globalMap.get(&apos;channel_qliq_db&apos;);
//
//    var channelIntegration = globalMap.get(&apos;chaneelCernerIntegration&apos;);
//
//     var eventData = sourceMap.get(&apos;parameters&apos;);
////var appointmentConfirmed = eventData.getParameter(&apos;appointmentConfirmed&apos;);
////var greaterThanDate = eventData.getParameter(&apos;greaterThanDate&apos;);
////var lessThanDate = eventData.getParameter(&apos;lessThanDate&apos;);
////var eventName = eventData.getParameter(&apos;eventName&apos;);
////var first_name = eventData.getParameter(&apos;first_name&apos;);
////var middle_name = eventData.getParameter(&apos;middle_name&apos;);
////var last_name = eventData.getParameter(&apos;last_name&apos;);
////var details = eventData.getParameter(&apos;details&apos;);
////var email = eventData.getParameter(&apos;email&apos;);
//
//// get look up transformer
//
//
//
//var baseMap = Maps.map()
//				.add(&apos;sourceChannelId&apos;, channelId)
//				.add(&apos;sourceChannelName&apos;, channelName)
//				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
//				.add(&apos;eventData&apos;, eventData)  
////				.add(&apos;version&apos;, version)
////				.add(&apos;accessToken&apos;, accessToken)
//				
//var appointmentRequest = new RawMessage(&apos;&apos;, [1], baseMap);
//var appointmentLookUPResponse = router.routeMessageByChannelId(channelIntegration, appointmentRequest);
// logger.info(&quot;apt response&quot;+appointmentLookUPResponse);
//return appointmentLookUPResponse;
////if (appointmentLookUPResponse.getStatus() != &apos;SENT&apos;) {
////	var errorString = appointmentLookUPResponse.getError();
////	var errorMsg, statusCode;
////	if (errorString.indexOf(&apos;Read timed out&apos;) != -1) {
////		errorMsg = &quot;Read timed out&quot;;
////		statusCode = &quot;500&quot;;
////	} else if(errorString.indexOf(&apos;Name or service not known&apos;) != -1){
////		errorMsg = &quot;Name or service not known&quot;;
////		statusCode = &quot;500&quot;;
////	} else if(errorString.indexOf(&apos;access token has expired&apos;) != -1){
////		errorMsg = &quot;Mirth access token has expired&quot;;
////		statusCode = &quot;500&quot;;
////	} else if(errorString.indexOf(&apos;invalid access token&apos;) != -1){
////		errorMsg = &quot;Mirth invalid access token&quot;;
////		statusCode = &quot;500&quot;;
////	} else if(errorString.indexOf(&apos;&quot;message&quot;:&apos;) != -1){
////		var ermsg = errorString.split(&apos;&quot;message&quot;:&apos;)[1];
////		var ermsg = ermsg.split(&apos;&quot;&apos;)[1];
////		var ermsg = ermsg.split(&apos;&quot;&apos;)[0];
////		errorMsg = ermsg;
////		statusCode = &quot;400&quot;;
////	} else{
////		errorMsg = &quot;Unknown Error&quot;;
////		statusCode = &quot;500&quot;;
////	}
////	channelMap.put(&apos;http-status-code&apos;, statusCode);
////	channelMap.put(&apos;custom-error&apos;, JSON.stringify({ &apos;error&apos;: errorMsg}));
////	var ehrQueryString = &apos;SELECT qliq.error_log_record(?::jsonb, ?, ?);&apos;
////	var ehrQuery = JSON.stringify({
////                   query: ehrQueryString,
////                   params: [JSON.stringify([ehrRecord]), null, errorMsg]
////                   });
////     var ehrQueryRequest = new RawMessage(ehrQuery, [1], baseMap);
////     var ehrQueryResponse = router.routeMessageByChannelId(channelDB, ehrQueryRequest);
////	return;
////}
////
////var appointmentsResponse = JSON.parse(appointmentLookUPResponse.getMessage());
////logger.info(&quot;appointment data=&quot;+appointmentsResponse);
////var responseItems = appointmentsResponse.items;
////
////channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
////
////msg = responseItems;
//  //return JSON.stringify(appointmentLookUPResponse);
//return msg;</script>
      </properties>
      <transformer version="3.9.1">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
            <name>Validation</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>//var version = channelMap.get(&apos;version&apos;); 
//var accessToken =  channelMap.get(&apos;accessToken&apos;); 
//var ehrRecord = channelMap.get(&apos;ehrRecord&apos;);
//var channelDB = globalMap.get(&apos;channel_qliq_db&apos;);
//
  //  var channelIntegration = globalMap.get(version+&apos;channel-cerner-integration&apos;);
//
   //  var eventData = sourceMap.get(&apos;parameters&apos;);
//var appointmentConfirmed = eventData.getParameter(&apos;appointmentConfirmed&apos;);
//var greaterThanDate = eventData.getParameter(&apos;greaterThanDate&apos;);
//var lessThanDate = eventData.getParameter(&apos;lessThanDate&apos;);
//var eventName = eventData.getParameter(&apos;eventName&apos;);
//var first_name = eventData.getParameter(&apos;first_name&apos;);
//var middle_name = eventData.getParameter(&apos;middle_name&apos;);
//var last_name = eventData.getParameter(&apos;last_name&apos;);
//var details = eventData.getParameter(&apos;details&apos;);
//var email = eventData.getParameter(&apos;email&apos;);
//
//if(!(greaterThanDate || lessThanDate)){
//	channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
//	channelMap.put(&apos;custom-error&apos;, JSON.stringify({ &apos;error&apos;: &quot;greaterThanDate or lessThanDate is required&quot;}));
//	return;
//}
//
//if(appointmentConfirmed == &apos;&apos; || greaterThanDate == &apos;&apos; || lessThanDate == &apos;&apos; || eventName == &apos;&apos; || 
//	first_name == &apos;&apos; || middle_name == &apos;&apos; || last_name == &apos;&apos; || details == &apos;&apos; || email == &apos;&apos;){
//	channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
//	channelMap.put(&apos;custom-error&apos;, JSON.stringify({ &apos;error&apos;: &quot;One or more fields are empty&quot;}));
//	return;
//}
//
//if(greaterThanDate){
//	if(!(isValidDate(greaterThanDate))){
//		channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
//		channelMap.put(&apos;custom-error&apos;, JSON.stringify({ &apos;error&apos;: &quot;Invalid greaterThanDate! greaterThanDate should be in MM-DD-YYYY format&quot;}));
//		return;
//	}
//}
//
//if(lessThanDate){
//	if(!(isValidDate(lessThanDate))){
//		channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
//		channelMap.put(&apos;custom-error&apos;, JSON.stringify({ &apos;error&apos;: &quot;Invalid lessThanDate! lessThanDate should be in MM-DD-YYYY format&quot;}));
//		return;
//	}
//}
//
//if(appointmentConfirmed){
//	if(!(isBooleanStr(appointmentConfirmed))){
//		channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
//		channelMap.put(&apos;custom-error&apos;, JSON.stringify({ &apos;error&apos;: &quot;Only true or false is accepted in appointmentConfirmed field&quot;}));
//		return;
//	}
//}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
            <name>Get appointment lookup</name>
            <sequenceNumber>1</sequenceNumber>
            <enabled>true</enabled>
            <script>//var baseMap = Maps.map()
//				.add(&apos;sourceChannelId&apos;, channelId)
//				.add(&apos;sourceChannelName&apos;, channelName)
//				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
//				.add(&apos;eventData&apos;, eventData)  
//				.add(&apos;version&apos;, version)
//				.add(&apos;accessToken&apos;, accessToken)
//				
//var appointmentRequest = new RawMessage(&apos;&apos;, [3], baseMap);
//var appointmentLookUPResponse = router.routeMessageByChannelId(channelIntegration, appointmentRequest);
//
////if (appointmentLookUPResponse.getStatus() != &apos;SENT&apos;) {
////	var errorString = appointmentLookUPResponse.getError();
////	var errorMsg, statusCode;
////	if (errorString.indexOf(&apos;Read timed out&apos;) != -1) {
////		errorMsg = &quot;Read timed out&quot;;
////		statusCode = &quot;500&quot;;
////	} else if(errorString.indexOf(&apos;Name or service not known&apos;) != -1){
////		errorMsg = &quot;Name or service not known&quot;;
////		statusCode = &quot;500&quot;;
////	} else if(errorString.indexOf(&apos;access token has expired&apos;) != -1){
////		errorMsg = &quot;Mirth access token has expired&quot;;
////		statusCode = &quot;500&quot;;
////	} else if(errorString.indexOf(&apos;invalid access token&apos;) != -1){
////		errorMsg = &quot;Mirth invalid access token&quot;;
////		statusCode = &quot;500&quot;;
////	} else if(errorString.indexOf(&apos;&quot;message&quot;:&apos;) != -1){
////		var ermsg = errorString.split(&apos;&quot;message&quot;:&apos;)[1];
////		var ermsg = ermsg.split(&apos;&quot;&apos;)[1];
////		var ermsg = ermsg.split(&apos;&quot;&apos;)[0];
////		errorMsg = ermsg;
////		statusCode = &quot;400&quot;;
////	} else{
////		errorMsg = &quot;Unknown Error&quot;;
////		statusCode = &quot;500&quot;;
////	}
////	channelMap.put(&apos;http-status-code&apos;, statusCode);
////	channelMap.put(&apos;custom-error&apos;, JSON.stringify({ &apos;error&apos;: errorMsg}));
////	var ehrQueryString = &apos;SELECT qliq.error_log_record(?::jsonb, ?, ?);&apos;
////	var ehrQuery = JSON.stringify({
////                   query: ehrQueryString,
////                   params: [JSON.stringify([ehrRecord]), null, errorMsg]
////                   });
////     var ehrQueryRequest = new RawMessage(ehrQuery, [1], baseMap);
////     var ehrQueryResponse = router.routeMessageByChannelId(channelDB, ehrQueryRequest);
////	return;
////}
//
//var appointmentsResponse = JSON.parse(appointmentLookUPResponse.getMessage());
//logger.info(&quot;appointment data=&quot;+appointmentsResponse);
//var responseItems = appointmentsResponse.items;
//
//msg = responseItems;</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
            <name>Trasnform response to FHIR</name>
            <sequenceNumber>2</sequenceNumber>
            <enabled>true</enabled>
            <script>//tmp = [];
//for(var i=0; i&lt;= msg.length -1; i++){
//	
//	var qliqJson = {};
//
//	qliqJson[&apos;resourceType&apos;] = &apos;Appointment&apos;;  
//	qliqJson[&apos;id&apos;] = msg[i].id; 
//	if(msg[i].workflowStatus){
//		qliqJson[&apos;status&apos;] = msg[i].workflowStatus.toLowerCase();
//	} else{
//		qliqJson[&apos;status&apos;] = null;
//	}
//	qliqJson[&apos;description&apos;] = null;			 				 	
//	qliqJson[&apos;start&apos;] = msg[i].appointmentDate.split(&apos;T&apos;)[0]+&apos;T&apos;+msg[i].beginTime.slice(0,2)+&apos;:&apos;+msg[i].beginTime.slice(2,4)+&apos;:00Z&apos;; 	
//	qliqJson[&apos;end&apos;] = msg[i].appointmentDate.split(&apos;T&apos;)[0]+&apos;T&apos;+msg[i].endTime.slice(0,2)+&apos;:&apos;+msg[i].endTime.slice(2,4)+&apos;:00Z&apos;; 
//	qliqJson[&apos;created&apos;] = msg[i].createTimestamp.split(&apos;T&apos;)[0]; 
//	qliqJson[&apos;comment&apos;] = null;
//	if(msg[i].middleName){
//		qliqJson[&apos;participant&apos;] = [ { &apos;actor&apos;: { &apos;reference&apos;: &apos;Patient/example&apos;, &apos;display&apos;: msg[i].firstName+&apos; &apos;+msg[i].middleName+&apos; &apos;+msg[i].lastName },
//								&apos;required&apos;: null, &apos;status&apos;: null } ];
//	} else{
//		qliqJson[&apos;participant&apos;] = [ { &apos;actor&apos;: { &apos;reference&apos;: &apos;Patient/example&apos;, &apos;display&apos;: msg[i].firstName+&apos; &apos;+msg[i].lastName }, 
//								&apos;required&apos;: null, &apos;status&apos;: null } ];
//	}
//	
//	qliqJson[&apos;serviceCategory&apos;] = [ {&apos;coding&apos;: [ { &apos;system&apos;: &apos;http://example.org/service-category&apos;, &apos;code&apos;: null, &apos;display&apos;:null } ] }]; 
//	qliqJson[&apos;serviceType&apos;] = [ {&apos;coding&apos;: [ { &apos;code&apos;: null, &apos;display&apos;:null } ] }]; 
//	qliqJson[&apos;specialty&apos;] = [ {&apos;coding&apos;: [ { &apos;system&apos;: &apos;http://snomed.info/sct&apos;, &apos;code&apos;: null, &apos;display&apos;:null } ] }]; 
//	qliqJson[&apos;appointmentType&apos;] = {&apos;coding&apos;: [ { &apos;system&apos;: &apos;http://terminology.hl7.org/CodeSystem/v2-0276&apos;, &apos;code&apos;: null, &apos;display&apos;:null } ] }; 
//	qliqJson[&apos;reasonReference&apos;] = [ { &apos;reference&apos;: null, &apos;display&apos;: null} ]; 
//	qliqJson[&apos;basedOn&apos;] = [ { &apos;reference&apos;: null } ];
//	
//	
//	tmp.push(qliqJson);
//}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.1">
      <metaDataId>2</metaDataId>
      <name>patient-lookup</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>// path for get patient by id =//&apos;https://fhir-open.cerner.com/r4/ec2458f2-1e24-41c8-b71b-0e701af7583d/Patient&apos;;

 var eventData = sourceMap.get(&apos;parameters&apos;);
logger.info(&quot;event data in receiver=&quot;+eventData);
var channelIntegration = globalMap.get(&apos;chaneelCernerIntegration&apos;);
  

var baseMap = Maps.map()
				.add(&apos;sourceChannelId&apos;, channelId)
				.add(&apos;sourceChannelName&apos;, channelName)
				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
		          .add(&apos;eventData&apos;,eventData)
				

var patientLookUpRequest = new RawMessage(eventData, [2], baseMap);
var patientLookUpResponse = router.routeMessageByChannelId(channelIntegration, patientLookUpRequest); 

if (patientLookUpResponse.getStatus() != &apos;SENT&apos;) {
	channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
	logger.info(&apos;error=&apos;+patientLookUpResponse);
	return patientLookUpResponse;
}
      // return JSON.parse(JSON.stringify(patientLookUpResponse.getMessage()));
      logger.info(&quot;patient lookup=&quot;+patientLookUpResponse.getMessage());
      channelMap.put(&apos;http-status-code&apos;, &apos;200&apos;);
	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
return patientLookUpResponse.getMessage();</script>
      </properties>
      <transformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.1">
      <metaDataId>3</metaDataId>
      <name>create-appointment</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>
 //var eventData = connectorMessage.getEncodedData();
 var eventData=connectorMessage.getRawData();
 //var eventData = sourceMap.get(&apos;parameters&apos;);
logger.info(&quot;event data of create appointment in receiver=&quot;+eventData);
var channelIntegration = globalMap.get(&apos;chaneelCernerIntegration&apos;);

var accessToken =  channelMap.get(&apos;access_token&apos;);  
logger.info(&quot;access token in reciever=&quot;+accessToken);  

var baseMap = Maps.map()
				.add(&apos;sourceChannelId&apos;, channelId)
				.add(&apos;sourceChannelName&apos;, channelName)
				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
		          .add(&apos;eventData&apos;,eventData)
		          .add(&apos;accessToken&apos;,accessToken)
		          .add(&apos;isCreateAppointment&apos;,true);
				

var AppointRequest = new RawMessage(eventData, [3], baseMap);
var AppointResponse = router.routeMessageByChannelId(channelIntegration,AppointRequest); 

if (AppointResponse.getStatus() != &apos;SENT&apos;) {
	channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
	logger.info(&apos;error=&apos;+AppointResponse);
	return AppointResponse;
}
      // return JSON.parse(JSON.stringify(patientLookUpResponse.getMessage()));
      logger.info(&quot;appointment create response=&quot;+AppointResponse);
      channelMap.put(&apos;http-status-code&apos;, &apos;201&apos;);
	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
return AppointResponse.getMessage();

//var eventData = connectorMessage.getEncodedData();
//
////var appointmentId = sourceMap.get(&apos;appointmentId&apos;);
//var channelAPI = globalMap.get(&apos;channel_Capi_sender&apos;);
//
//logger.info(&quot;EventData: &quot;+eventData);
//
//logger.info(&quot;EventData: stringify   &quot;+JSON.stringify(eventData));
//
//var path = &apos;/Appointment/&apos;;
//
//path = encodeURI(path); 
//
//var baseMap = Maps.map()
//	.add(&apos;sourceChannelId&apos;, channelId)
//	.add(&apos;sourceChannelName&apos;, channelName)
//	.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
//	.add(&apos;path&apos;, path)
//	.add(&apos;eventData&apos;,eventData);
//	//.add(&apos;isCreateAppointment&apos;, true);
//	
//var postRequest = new RawMessage(eventData, [2], baseMap);
//var postResponse = router.routeMessageByChannelId(channelAPI, postRequest);
//
//if (postResponse.getStatus() != &apos;SENT&apos;) {
//channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
//channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
//logger.info(&quot;error=&quot;+postResponse.getError());
//return postResponse;
//}
//
//     channelMap.put(&apos;http-status-code&apos;, &apos;200&apos;);
//	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
//return postResponse;</script>
      </properties>
      <transformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.1">
      <metaDataId>4</metaDataId>
      <name>create-patient</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>
 //var eventData = connectorMessage.getEncodedData();
 var eventData=connectorMessage.getRawData();
 //var eventData = sourceMap.get(&apos;parameters&apos;);
logger.info(&quot;event data of create patient in receiver=&quot;+eventData);
var channelIntegration = globalMap.get(&apos;chaneelCernerIntegration&apos;);

var accessToken =  channelMap.get(&apos;access_token&apos;);  
logger.info(&quot;access token in reciever=&quot;+accessToken);

var baseMap = Maps.map()
				.add(&apos;sourceChannelId&apos;, channelId)
				.add(&apos;sourceChannelName&apos;, channelName)
				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
		          .add(&apos;eventData&apos;,eventData)
		          .add(&apos;accessToken&apos;,accessToken)
		          .add(&apos;isCreatePatient&apos;,true);
				

var patientRequest = new RawMessage(eventData, [4], baseMap);
var patientResponse = router.routeMessageByChannelId(channelIntegration,patientRequest); 

if (patientResponse.getStatus() != &apos;SENT&apos;) {
	channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
	logger.info(&apos;error=&apos;+patientResponse);
	return patientResponse;
}
      // return JSON.parse(JSON.stringify(patientLookUpResponse.getMessage()));
      logger.info(&quot;patient create response=&quot;+patientResponse);
      channelMap.put(&apos;http-status-code&apos;, &apos;201&apos;);
	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
return patientResponse.getMessage();








//
//
//
////var=eventData=connectorMessage.getRawData();
//var eventData = connectorMessage.getEncodedData();
//
////var appointmentId = sourceMap.get(&apos;appointmentId&apos;);
//var channelAPI = globalMap.get(&apos;channel_Capi_sender&apos;);
//
//logger.info(&quot;EventData: &quot;+eventData);
//
//logger.info(&quot;EventData: stringify   &quot;+JSON.stringify(eventData));
//
//var path = &apos;/Patient/&apos;;
//
//path = encodeURI(path); 
//
//var baseMap = Maps.map()
//	.add(&apos;sourceChannelId&apos;, channelId)
//	.add(&apos;sourceChannelName&apos;, channelName)
//	.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
//	.add(&apos;path&apos;, path);
//	//.add(&apos;isCreateAppointment&apos;, true);
//	
//var postRequest = new RawMessage(eventData, [3], baseMap);
//var postResponse = router.routeMessageByChannelId(channelAPI, postRequest);
//
//logger.info(&quot;response in create patient=&quot;+postResponse);
//if (postResponse.getStatus() != &apos;SENT&apos;) {
//channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
//channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
//logger.info(&quot;error=&quot;+postResponse.getError());
//return postResponse;
//}
//     channelMap.put(&apos;http-status-code&apos;, &apos;200&apos;);
//	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
//return postResponse;</script>
      </properties>
      <transformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.1">
      <metaDataId>5</metaDataId>
      <name>access-token</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>
var eventData = sourceMap.get(&apos;parameters&apos;);

 var grant_type=eventData.getParameter(&apos;grant_type&apos;);
 var scope=eventData.getParameter(&apos;scope&apos;);


   var channelAPI = globalMap.get(&apos;channel_Capi_sender&apos;);

   var channelDB = globalMap.get(&apos;channel_qliq_db&apos;);


var baseMap = Maps.map()
	.add(&apos;sourceChannelId&apos;, channelId)
	.add(&apos;sourceChannelName&apos;, channelName)
	.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
	.add(&apos;eventData&apos;,eventData)
	.add(&apos;grant_type&apos;,grant_type)
	.add(&apos;scope&apos;,scope);

logger.info(&quot;event data=&quot;+eventData);
	
var postRequest = new RawMessage(&quot;&quot;, [4], baseMap);
var postResponse = router.routeMessageByChannelId(channelAPI, postRequest);

      logger.info(&quot;response =&quot;+postResponse.getMessage());  

      var data=JSON.parse(postResponse.getMessage());
     var access_token1=data.access_token;
     var expires_in1=data.expires_in;
     logger.info(&quot;access token=&quot;+access_token1);
     logger.info(&quot;expires in=&quot;+expires_in1);
     var ehr_name1=&apos;cerner&apos;;

    
   var last_updated= new Date();
  // var last_updated=Date.now();
     var ehrQueryString = &apos;UPDATE register.ehr_cdetails SET access_token=?, expires_in=?,last_token_updated_at=? WHERE ehr_name=?:: varchar&apos;;
	var ehrQuery = JSON.stringify({
                   query: ehrQueryString,
                   params: [access_token1,expires_in1,last_updated,ehr_name1]
                   });
     var ehrQueryRequest = new RawMessage(ehrQuery, [2], baseMap);
     var ehrQueryResponse = router.routeMessageByChannelId(channelDB, ehrQueryRequest);
	if (ehrQueryResponse.getStatus() != &apos;SENT&apos;) {
	channelMap.put(&apos;http-status-code&apos;, &apos;500&apos;);
	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
	return ResponseFactory.getErrorResponse(JSON.stringify({ &apos;error&apos;: &quot;Database operation failed&quot;}));
     }
    // channelMap.put(&apos;access_token&apos;,access_token1);
	
	//return ehrQueryResponse;
  
//logger.info(&quot;response =&quot;+JSON.stringify(JSON.parse(postResponse)));
if (postResponse.getStatus() != &apos;SENT&apos;) {
channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
logger.info(&quot;error=&quot;+postResponse.getError());
return postResponse ;
}

     channelMap.put(&apos;http-status-code&apos;, &apos;200&apos;);
	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
return postResponse;


</script>
      </properties>
      <transformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.1">
      <metaDataId>6</metaDataId>
      <name>get-slot</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script> var eventData = sourceMap.get(&apos;parameters&apos;);
logger.info(&quot;event data in receiver=&quot;+eventData);
var channelIntegration = globalMap.get(&apos;chaneelCernerIntegration&apos;);
  

var baseMap = Maps.map()
				.add(&apos;sourceChannelId&apos;, channelId)
				.add(&apos;sourceChannelName&apos;, channelName)
				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
		          .add(&apos;eventData&apos;,eventData)
				

var slotRequest = new RawMessage(eventData, [5], baseMap);
var slotResponse = router.routeMessageByChannelId(channelIntegration, slotRequest); 
 logger.info(&quot;slot response in receiver=&quot;+slotResponse);
if (slotResponse.getStatus() != &apos;SENT&apos;) {
	channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
	logger.info(&apos;error=&apos;+slotResponse);
	return slotResponse;
}
      // return JSON.parse(JSON.stringify(slotResponse.getMessage()));
      logger.info(&quot;slot response in receiver=&quot;+slotResponse);
      channelMap.put(&apos;http-status-code&apos;, &apos;200&apos;);
	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
return slotResponse;</script>
      </properties>
      <transformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.1">
      <metaDataId>7</metaDataId>
      <name>cancel-appointment</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>var eventData = JSON.parse(connectorMessage.getRawData());
var Data = sourceMap.get(&apos;parameters&apos;);
var id=Data.getParameter(&apos;id&apos;);
var accessToken =channelMap.get(&apos;access_token&apos;);
var channelSender = globalMap.get(&apos;chaneelCernerIntegration&apos;);
var baseMap = Maps.map()
				.add(&apos;sourceChannelId&apos;, channelId)
				.add(&apos;sourceChannelName&apos;, channelName)
				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
				.add(&apos;eventData&apos;, eventData)  
				.add(&apos;accessToken&apos;,accessToken)
				.add(&apos;id&apos;,id)
				.add(&apos;isCancelledAppointment&apos;,true)
				
var appointmentRequest = new RawMessage(&quot;&quot;, [6], baseMap);
var appointmentLookUPResponse = router.routeMessageByChannelId(channelSender, appointmentRequest);

if (appointmentLookUPResponse.getStatus() != &apos;SENT&apos;) 
{
		channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
		channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
		logger.info(&quot;Error&quot;+appointmentLookUPResponse.getError());
		return appointmentLookUPResponse.getError();
}
	
var msg = appointmentLookUPResponse.getMessage();

channelMap.put(&apos;http-status-code&apos;, &apos;200&apos;);
channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
return ResponseFactory.getSentResponse(msg);












//
//logger.info(&quot;hii i am update apt receiver&quot;);
//var accessToken =  channelMap.get(&apos;accessToken&apos;);
////var ehrRecord = channelMap.get(&apos;ehrRecord&apos;);
//var channelDB = globalMap.get(&apos;channel_qliq_db&apos;);
//
//var CernerUpdateAppointment = globalMap.get(&apos;channel-cerner-update-apt&apos;);
//
//var eventData = JSON.parse(connectorMessage.getRawData());
//
//var baseMap = Maps.map()
//	.add(&apos;sourceChannelId&apos;, channelId)
//	.add(&apos;sourceChannelName&apos;, channelName)
//	.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
//	.add(&apos;eventData&apos;, eventData)
//	.add(&apos;accessToken&apos;, accessToken)
//
//var appointmentUpdateRequest = new RawMessage(&apos;&apos;, [1], baseMap);
//var appointmentUpdateResponse = router.routeMessageByChannelId(CernerUpdateAppointment, appointmentUpdateRequest);
//
//logger.info(&quot;apt update response in reciver=&quot;+appointmentUpdateResponse);
//if (appointmentUpdateResponse.getStatus() != &apos;SENT&apos;) {
//	var errorString = appointmentUpdateResponse.getError();
//	var errorMsg, statusCode;
//	if (errorString.indexOf(&apos;Read timed out&apos;) != -1) {
//		errorMsg = &quot;Read timed out&quot;;
//		statusCode = &quot;500&quot;;
//	} else if(errorString.indexOf(&apos;Name or service not known&apos;) != -1){
//		errorMsg = &quot;Name or service not known&quot;;
//		statusCode = &quot;500&quot;;
//	} else if(errorString.indexOf(&apos;access token has expired&apos;) != -1){
//		errorMsg = &quot;Mirth access token has expired&quot;;
//		statusCode = &quot;500&quot;;
//	} else if(errorString.indexOf(&apos;invalid access token&apos;) != -1){
//		errorMsg = &quot;Mirth invalid access token&quot;;
//		statusCode = &quot;500&quot;;
//	} else if(errorString.indexOf(&apos;Internal server error&apos;) != -1){
//		errorMsg = &quot;Internal server error&quot;;
//		statusCode = &quot;500&quot;;
//	} else if(errorString.indexOf(&apos;&quot;message&quot;:&apos;) != -1){
//		var ermsg = errorString.split(&apos;&quot;message&quot;:&apos;)[1];
//		var ermsg = ermsg.split(&apos;&quot;&apos;)[1];
//		var ermsg = ermsg.split(&apos;&quot;&apos;)[0];
//		errorMsg = ermsg;
//		statusCode = &quot;400&quot;;
//	} else{
//		errorMsg = &quot;Unknown Error&quot;;
//		statusCode = &quot;500&quot;;
//	}
//	channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
//	channelMap.put(&apos;http-status-code&apos;, statusCode);
//	channelMap.put(&apos;custom-error&apos;, JSON.stringify({ &apos;error&apos;: errorMsg}));
//	
//}
//channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
//return appointmentUpdateResponse;
//
//
//
</script>
      </properties>
      <transformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.9.1">
      <metaDataId>8</metaDataId>
      <name>reschedule-appointment</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script> var accessToken =  channelMap.get(&apos;access_token&apos;);  

 var eventData = sourceMap.get(&apos;parameters&apos;);
 logger.info(&quot;event data in receiver=&quot;+eventData);
 var id=eventData.getParameter(&apos;patient&apos;);
 var start=eventData.getParameter(&apos;start&apos;);
 var end=eventData.getParameter(&apos;end&apos;);
 var reasonCode=eventData.getParameter(&apos;reasonCode&apos;);

 var channelSender = globalMap.get(&apos;channel-cerner-update-apt&apos;);
 var baseMap = Maps.map()
				.add(&apos;sourceChannelId&apos;, channelId)
				.add(&apos;sourceChannelName&apos;, channelName)
				.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString())
				.add(&apos;eventData&apos;, eventData)  
				.add(&apos;accessToken&apos;,accessToken)
				.add(&apos;id&apos;,id)
				.add(&apos;start&apos;,start)
				.add(&apos;end&apos;,end)
				.add(&apos;reasonCode&apos;,reasonCode)

	var appointmentRequest = new RawMessage(&quot;&quot;, [2], baseMap);
     var appointmentLookUPResponse = router.routeMessageByChannelId(channelSender, appointmentRequest);

   if (appointmentLookUPResponse.getStatus() != &apos;SENT&apos;) 
   {
		channelMap.put(&apos;http-status-code&apos;, &apos;400&apos;);
		channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
		logger.info(&quot;Error&quot;+appointmentLookUPResponse.getError());
		return appointmentLookUPResponse.getError();
 }
	
 var msg = appointmentLookUPResponse.getMessage();

  channelMap.put(&apos;http-status-code&apos;, &apos;200&apos;);
  channelMap.put(&apos;http-content-type&apos;, &apos;application/json&apos;);
  return ResponseFactory.getSentResponse(msg);
			</script>
      </properties>
      <transformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>
// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

var destinations = sourceMap.get(&apos;destinationSet&apos;);
var metadataIds = destinations.toArray();

if(responseMap.get(&apos;finalResponse&apos;)){
	return JSON.stringify(responseMap.get(&apos;finalResponse&apos;));
}
if(channelMap.get(&apos;custom-error&apos;)){
		return ResponseFactory.getErrorResponse(channelMap.get(&apos;custom-error&apos;));
}
if (metadataIds.length == 0) {
	return ResponseFactory.getErrorResponse(JSON.stringify({ &apos;error&apos;: &apos;Invalid request&apos;}));
}

var smsg = message.getConnectorMessages().get(0);
if (smsg.getStatus() == &apos;ERROR&apos;) {
	// return smsg;

	return ResponseFactory.getErrorResponse(&apos;&apos;);
}

var metadataID = metadataIds[0];
var cmsg = message.getConnectorMessages().get(metadataID);
return cmsg.getResponseData();

/*
if (cmsg.getProcessedResponseData() != null) {
	return cmsg.getProcessedResponseData();
}

if (cmsg.getResponseData() != null) {
	return cmsg.getResponseData().getMessage();	
}
*/

return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
//globalMap.put(&apos;channel-cerner-receiver8089&apos;,channelId);

globalMap.put(&apos;channelReciver&apos;,channelId)
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.9.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.9.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1645627982895</time>
        <timezone>Asia/Kolkata</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.9.1">
        <id>d316c4bc-9e10-4162-b67c-e514afc59fa3</id>
        <name>Channel Helpers</name>
        <revision>3</revision>
        <lastModified>
          <time>1643026252229</time>
          <timezone>Asia/Kolkata</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>1aca2a66-a83a-4703-9ec7-dfaa3a6ad5b2</string>
          <string>3e15b608-553f-45e7-a617-712d6b75ab4d</string>
          <string>2f511815-92d1-4f0f-92e9-f4f8ae576b75</string>
          <string>b4a51816-0aad-444a-b1ce-f5c11f9961bc</string>
          <string>cb7f055d-45ae-43b7-ac7c-bb2b2db34ded</string>
          <string>139cdc6a-5f40-46bd-a246-2a9a1ef8ed10</string>
          <string>6ff8ca2b-c4e3-4e6f-897a-17f36ed63faa</string>
          <string>27aee1c0-8ed0-4062-89b5-1c7a69a946bc</string>
          <string>291b4847-a85d-41c6-bd4a-37f008b15ca8</string>
          <string>81c836fd-cbba-4247-b438-d4c9987ee75b</string>
          <string>0763b542-8ed8-4a30-9c35-de3dbf030626</string>
          <string>75c150e0-fbc5-4eef-a856-bec6b3a39a24</string>
          <string>dd55a671-a099-4b29-bdbb-85c34050037a</string>
          <string>ae504043-55f5-497e-ac87-33686e7569b2</string>
          <string>69f5ad2c-3bf4-4d55-8e4a-bd6faade202d</string>
          <string>a8bd6f50-894f-443f-b248-da3ebad3a748</string>
          <string>1e45f5ac-6815-40a8-8fe9-15e98eb1d07b</string>
          <string>e3f0d1cc-ce6b-44c0-b6b0-5f6ff3f4a385</string>
          <string>3d95de17-a2ea-446c-be4c-36c32d8cda1c</string>
          <string>fdcb1121-0d49-4ed8-b1a1-4f4482e1c20a</string>
          <string>8c5d3887-bd22-4018-aeda-45e5c0f8d551</string>
          <string>a127fffb-1663-4206-b6d3-348aa228c999</string>
          <string>143b10e0-e01b-4942-9995-2d3b9a165d76</string>
          <string>6060b76d-07c2-4f9f-bc71-d2e8c44d8271</string>
          <string>08536fee-6f99-4cc4-8958-f84daaee73d5</string>
          <string>183b6833-a563-42cb-8d4d-cdcb740aef30</string>
          <string>bd81709b-2ef0-4760-aba9-f455fb338f37</string>
          <string>695c7ed6-252e-4229-83db-5571946a8b62</string>
          <string>50dcf6de-46b4-4de5-99c2-d341abb8a41a</string>
          <string>ed4ef090-3f7e-442d-ad30-744e3a1313f2</string>
          <string>ed3e52dc-3023-4cc7-8cad-47e0d5df89c1</string>
          <string>ec29c308-0bc3-4eb0-a948-09c2c0747afa</string>
          <string>aeaba1c0-cef9-4ad8-82d7-76d66cc95562</string>
          <string>58f42d4f-22e1-4f7c-8acf-93a9fe92619c</string>
          <string>0fb98224-a957-4f55-b469-54d1827403b7</string>
          <string>2a33ffd6-253d-402f-8fb6-93bd94f65dcd</string>
          <string>7445aaa5-ff13-4c08-a8b1-817cfed2692b</string>
          <string>dcaf136d-a3b8-47ed-aec7-d1619675ba2d</string>
          <string>285faf0d-523a-4c8e-92ec-4a0f3a89e048</string>
          <string>ca3ba816-4bc5-4d3d-bff6-661f3116a41f</string>
          <string>90bc60ed-14c6-49db-b1e6-bb70d2b1d01d</string>
          <string>7ee4a47d-bdf3-473d-9da9-3a62c41037b1</string>
          <string>2354b24f-a435-45be-888a-d9da289ffddd</string>
          <string>167ee803-661a-4e6e-ac6e-b84c057f7ca1</string>
          <string>a40e7657-c37a-4fb6-aa79-48a2ea16709c</string>
          <string>5d5e5835-8cd3-43af-ac82-ffe57439bfb5</string>
          <string>ae961745-fe19-46bd-b240-c82888091366</string>
          <string>68581957-7fba-421f-b063-941a804fcc46</string>
          <string>0056a8aa-7aa5-4047-a693-21bac64470aa</string>
          <string>2a637fa3-fb83-4666-abe0-c754924ff738</string>
          <string>d448196a-4282-4d10-8c9a-7f1dfd19abea</string>
          <string>05759809-cfbd-4546-8b71-fd28c2499763</string>
          <string>881db416-1776-4ab6-a3ce-5065ed11cdb5</string>
          <string>982b29a5-1743-4435-8842-9810e4e34926</string>
          <string>1bff9775-2de8-4b51-bb6b-6aaa29c144bb</string>
          <string>9dd36c7b-eefb-475c-967a-eaf22337e44e</string>
          <string>19b77578-2e99-4369-8255-e5693410adfc</string>
          <string>9316c229-da47-49f8-a2c0-398ba155d370</string>
          <string>55ebb133-1e4d-4172-8718-301240e9518f</string>
          <string>492a7c6c-4768-45e2-9f49-6c5488b0a2e5</string>
          <string>14a2ad40-95bb-4ac9-a10e-d326537cc5a6</string>
          <string>6aa39894-bc9b-448c-aac6-b6967a0ce243</string>
          <string>4108a56a-b1a6-4d8c-9e8e-b065654860d0</string>
          <string>bdb4241f-2858-49da-8d4e-2f1579679620</string>
          <string>692365a7-9ec6-4c38-adee-672f4084adf3</string>
          <string>3f433a3e-e46d-440a-82c1-5490ada6b54e</string>
          <string>054b1e32-c63c-4889-8be5-0a222bb5635f</string>
          <string>72471096-425b-4750-81a4-123fca2e302c</string>
          <string>03e40c6f-710d-4ec8-930b-431c42ecb178</string>
          <string>4a05dc00-9ad6-454a-b61b-ddd074bbb36c</string>
          <string>9d1c136c-3c94-43c3-b0f8-1c1551ac6987</string>
          <string>b2fdd8c2-f387-493b-ab35-e7e9e8ce056a</string>
          <string>930a4c9e-b458-4edf-92ff-3be07d68c28d</string>
          <string>0f0df6c9-1153-4e0b-800b-533492ba936c</string>
          <string>455c536f-d3fb-4832-941e-ef230b683590</string>
          <string>31b37e0b-cfbf-4787-b5d3-2082328fafd7</string>
          <string>21e47d6b-9863-4045-82af-8941087a4da1</string>
          <string>e3e3e5ec-408c-4d62-b68e-a4d10c9df4bb</string>
          <string>40dc87fa-7706-47ae-8659-2cc77d31972f</string>
          <string>b3869a86-7d4f-4a10-b116-24b758a191b3</string>
          <string>a6825055-e697-487f-9add-560ad9567a60</string>
          <string>f7552865-32a0-4b5b-a5fd-9b0bddffddf9</string>
          <string>9f2bcd3c-8a74-49f1-b910-aa05c509c9cb</string>
          <string>bd270438-7262-47f8-8656-1baf51287078</string>
          <string>61b10ef9-baef-45e2-b747-a0987d851033</string>
          <string>aa5ba1e6-ab11-4a9a-a03c-e0fe58b49086</string>
          <string>ec653b8b-7362-4167-98ff-3845c7560d11</string>
          <string>25c5fbce-cb87-4ba9-a572-0be49242a0b2</string>
          <string>13738349-4cc4-43de-9365-a27ead17b524</string>
          <string>11edffe6-6bc1-4525-8b91-ae1b54cadf14</string>
          <string>a43f7553-71de-41d3-aa16-93cc7a48bafc</string>
          <string>e1900e14-c2a2-426e-86f0-971353d60cdd</string>
          <string>99066deb-0d43-44f6-8823-b8cfe08e7185</string>
          <string>aa30f2b5-64cf-4396-b098-efeecb2224f2</string>
          <string>9fee4e0a-7a6d-4925-bc78-59df2c1f28af</string>
          <string>32b6f2bd-89f6-4928-9a07-e6c77fb7d6a4</string>
          <string>458521a9-3558-4d67-b167-40e8e115e77a</string>
          <string>57953b24-64cb-489d-9706-bf5dc1ef94ea</string>
          <string>08955a01-dda6-468b-a8cf-73586fe7d99f</string>
          <string>61866f32-0578-4694-ad96-621d492f65d9</string>
          <string>470c6c09-6850-4770-820c-bbfce54196bd</string>
          <string>21a820f0-205a-4046-8c4a-3788daca4d05</string>
          <string>75953c73-bd70-43ff-9226-e0f3d69d26aa</string>
          <string>9a44798a-871f-4402-9397-75241b18c6b0</string>
          <string>f1e2a84e-89e2-4ea0-8edd-4418f11b7eb7</string>
          <string>8b61cf50-9d95-43dd-b6ab-474e2a1d2d76</string>
          <string>4041500f-7768-4011-b273-13fe61a2ebd6</string>
          <string>eaf28278-dd66-4bcc-b7e7-9a6c422db1ee</string>
          <string>0e0f63c0-5b51-4626-9a50-c0e2f5f94d37</string>
          <string>f836f593-4c61-49bd-be13-4cb3f9c6cffb</string>
          <string>0fec52ca-be59-47c9-85b1-700dc3b3dc2e</string>
          <string>4d75bdd7-6d1f-4db5-a7f8-4f63efa13197</string>
          <string>53d49d46-bd95-4ce5-8f98-7685217fedbf</string>
          <string>d60b7b8a-e213-4af0-8475-6716635b38cb</string>
          <string>8c637e01-95b0-4b11-a28f-4518b7f8d1ae</string>
          <string>7f5da166-70b8-48e0-9fa9-cf96fd867c30</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.9.1">
            <id>bc768cd6-d735-40b1-9617-a3417481fe19</id>
            <name>Convert CSV to JSON</name>
            <revision>1</revision>
            <lastModified>
              <time>1642748380834</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} csv - CSV string with column headers
	@return {String} return JSON object using column headers and field keys
*/
function convertCsvToJson(csv) {
	var textXML = SerializerFactory.getSerializer(&apos;DELIMITED&apos;).toXML(csv);
	var xml = new XML(textXML);
	var dataItems = [];
	for (var i = 1; i &lt;= xml[&apos;row&apos;].length() - 1; i++) {
		var jsonData = {};
		for (var j = 1; j &lt;= xml[&apos;row&apos;][0].children().length(); j++) {
			var column = &apos;column&apos; + j.toString();
			var header = xml[&apos;row&apos;][0][column].toString().replace(/\s/g, &apos;_&apos;).replace(/-/g, &apos;_&apos;).toLowerCase();
			var value = xml[&apos;row&apos;][i][column].toString();
			
			jsonData[header] = value;
			
		}
		dataItems.push(jsonData);
	}

	return JSON.stringify(dataItems);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.1">
            <id>ff3df0b8-cfa2-4ec9-82ac-37c9e4830e0c</id>
            <name>Generic - Send message to channel destination</name>
            <revision>1</revision>
            <lastModified>
              <time>1642748380880</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function sendMessageToChannelDestination(channelID, destinationID, map, data) {
	var msgMap;
	var outData = {};
	
	if (!map) {
		msgMap = Maps.map();
	} else {
		msgMap = Maps.map(map);
	}

	if (data == null || data == undefined) {
		data = &apos;&apos;;
	}

	if (msgMap.get(&apos;sourceChannelId&apos;) == null) {
		msgMap.add(&apos;sourceChannelId&apos;, channelId);
	}
	if (msgMap.get(&apos;sourceChannelName&apos;) == null) {
		msgMap.add(&apos;sourceChannelName&apos;, channelName);
	}

	// Dirty way to handle connector message not being defined. Handles cases where this function 
	// is used in a source js writer.
	try {
		if (msgMap.get(&apos;sourceMessageId&apos;) == null &amp;&amp; connectorMessage &amp;&amp; connectorMessage.getMessageId()) {
			msgMap.add(&apos;sourceMessageId&apos;, connectorMessage.getMessageId().toString());
		}
	} catch(ex) {}

	var msgRequest = new RawMessage(data, [destinationID], msgMap);
	var msgResponse = router.routeMessageByChannelId(channelID, msgRequest);

	if (msgResponse == null) {
		// return;
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;; 
	}
	if (msgResponse.getStatus() == null) {
		throw ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;;
	}

	if (msgResponse.getStatus() == &apos;ERROR&apos;) {
		throw msgResponse.getMessage();
	}

	return msgResponse.getMessage();
	
	
	// var msgResponse;

	/*
	try {
		msgResponse = router.routeMessageByChannelId(channelID, msgRequest);
		outData.status = &apos;success&apos;;
		outData.status_message = &apos;message successfully sent to channel&apos;;
	} catch (ex) {
		outData.status = &apos;error&apos;;
		outData.status_message = ex.toString();
		return outData;
	}

	if (msgResponse.getStatus() == null) {
		outData.response_status = &apos;unknown&apos;;
		logger.error(&apos;Code Template &quot;Send message to channel by id&quot;: channel &quot;&apos; + ChannelUtil.getChannelName(channelID) + &apos;&quot; does not return a valid response object&apos;);
	}
	
	switch (String(msgResponse.getStatus())) {
		case &apos;ERROR&apos;:
			outData.response_status = &apos;error&apos;;
			break;
		case &apos;FILTERED&apos;:
			outData.response_status = &apos;filtered&apos;;
			break;
		case &apos;QUEUED&apos;:
			outData.response_status = &apos;queued&apos;;
			break;
		case &apos;RECEIVED&apos;:
			outData.response_status = &apos;received&apos;;
			break;
		case &apos;SENT&apos;:
			outData.response_status = &apos;sent&apos;;
			break;
	}

	outData.response_message = msgResponse.getMessage();

	return outData;
	*/
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.1">
            <id>f4cd9e71-4f8d-4472-80a9-31b533f4d578</id>
            <name>Get bots DB connection to specified environment</name>
            <revision>1</revision>
            <lastModified>
              <time>1642748380799</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get a new bots database connection. Be sure to wrap in try/finally block to close database connection.

	@param {String} environment - prod, staging, dev, local
	@return {String} return database connection
*/
function GetBotsDBConnection() {
	var username = configurationMap.get(&apos;bots-db-user&apos;);
	var password = configurationMap.get(&apos;bots-db-pass&apos;);
	var uri = configurationMap.get(&apos;bots-db-uri&apos;);	
	return DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, uri, username, password);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.1">
            <id>554bd282-172b-43a0-8902-992baf63b04d</id>
            <name>Get DB connection to specified environment</name>
            <revision>1</revision>
            <lastModified>
              <time>1642748380860</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get a new database connection. 

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetDBConnection(environment) {
	if (environment != &apos;prod&apos; &amp;&amp; environment != &apos;staging&apos; &amp;&amp; environment != &apos;dev&apos; &amp;&amp; environment != &apos;local&apos;) {
		return null;
	}
	
	var username = configurationMap.get(&apos;docsink-db-user-&apos; + environment);
	var password = configurationMap.get(&apos;docsink-db-pass-&apos; + environment);
	var uri = configurationMap.get(&apos;docsink-db-uri-&apos; + environment);

	return DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.cj.jdbc.Driver&apos;, uri, username, password);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.9.1">
            <id>552a87ed-b5a0-4546-9e5c-0a768661a351</id>
            <name>Postprocessor - Generate channel response</name>
            <revision>1</revision>
            <lastModified>
              <time>1642748380760</time>
              <timezone>Asia/Kolkata</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function generateChannelResponse() {
	// This script executes once after a message has been processed
	// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
	
	var destinations = sourceMap.get(&apos;destinationSet&apos;);
	var metadataIds = destinations.toArray();
	
	if (metadataIds.length == 0) {
		return ResponseFactory.getErrorResponse(&apos;invalid request&apos;);
	}
	
	var smsg = message.getConnectorMessages().get(0);
	if (smsg.getStatus() == &apos;ERROR&apos;) {
		if (smsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(smsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(smsg.getResponseData().getMessage());
	}
	
	var metadataID = metadataIds[0];
	var cmsg = message.getConnectorMessages().get(metadataID);

	if (cmsg.getStatus() == &apos;ERROR&apos;) {
		if (cmsg.getProcessingError()) {
			return ResponseFactory.getErrorResponse(cmsg.getProcessingError());
		}
		return ResponseFactory.getErrorResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;SENT&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;FILTERED&apos;) {
		return ResponseFactory.getFilteredResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;QUEUED&apos;) {
		return ResponseFactory.getQueuedResponse(cmsg.getResponseData().getMessage());
	} else if (cmsg.getStatus() == &apos;RECEIVED&apos;) {
		return ResponseFactory.getSentResponse(cmsg.getResponseData().getMessage());
	} else {
		return cmsg;
	}
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
    <channelTags/>
  </exportData>
</channel>